{"version":3,"sources":["RepoCard.js","ProjectTab.js","App.js","reportWebVitals.js","index.js"],"names":["RepoCard","this","props","image","title","description","zipUrl","githubUrl","Grid","item","xs","xl","Card","CardActionArea","target","href","CardMedia","component","alt","height","CardContent","Typography","gutterBottom","variant","color","CardActions","Button","size","Component","ProjectTab","children","value","index","role","hidden","id","aria-labelledby","Box","p","theme","createMuiTheme","palette","type","primary","main","secondary","useStyles","makeStyles","root","flexGrow","mainContainer","backgroundColor","grey","marginBottom","contentContainer","paddingTop","appBar","textAlign","paper","padding","spacing","text","App","classes","React","useState","setValue","className","ThemeProvider","AppBar","position","Toolbar","Tabs","onChange","event","newValue","scrollButtons","Tab","label","Container","maxWidth","container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6db44331.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n{/*\r\n\r\n    RepoCard Component\r\n\r\n    image:          path to static image associated with this repository.\r\n    title:          repository descriptive title.\r\n    description:    long repository description.\r\n    zipUrl:         link to download a branch of this repository.\r\n    githubUrl:      link reference to the repository.\r\n\r\n*/}\r\n\r\nclass RepoCard extends Component {\r\n\r\n    render() {\r\n        const {image, title, description, zipUrl, githubUrl} = this.props;\r\n        return (\r\n            <Grid item xs={12} xl={3}>\r\n                <Card >\r\n                    <CardActionArea target=\"_blank\" href={ githubUrl }>\r\n                        {image !== \"\" && (\r\n                        <CardMedia component=\"img\" alt={ title } height=\"140\"\r\n                                    image={ image }\r\n                                    title={ title } />)}\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                { title }\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                { description }\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                    <CardActions>\r\n                        <Button size=\"small\" target=\"_blank\" href={ zipUrl }>\r\n                            Descargar ZIP\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RepoCard;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n{/*\r\n\r\n    ProjectTab Component\r\n\r\n*/}\r\n\r\nclass ProjectTab extends Component {\r\n    render() {\r\n        const { children, value, index } = this.props;\r\n\r\n        return (\r\n            <div role=\"tabpanel\" hidden={value !== index}\r\n                    id={`scrollable-force-tabpanel-${index}`}\r\n                    aria-labelledby={`scrollable-force-tab-${index}`}>\r\n                {value === index && (\r\n                    <Box p={2}>\r\n                        {children}\r\n                    </Box>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nProjectTab.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default ProjectTab;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Container, Tab, Tabs, ThemeProvider } from '@material-ui/core';\r\nimport RepoCard from './RepoCard';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport ProjectTab from './ProjectTab';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: {\r\n        main: '#BF2633',\r\n    },\r\n    secondary: {\r\n        main: '#D9D166'\r\n    }\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    mainContainer: {\r\n        backgroundColor: grey[700],\r\n        height: '100%',\r\n        marginBottom: '0px'\r\n    },\r\n    contentContainer: {\r\n        paddingTop: '120px'\r\n    },\r\n    appBar: {\r\n        textAlign: 'center'\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n      id: `scrollable-force-tab-${index}`,\r\n      'aria-controls': `scrollable-force-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\nfunction App() {\r\n\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.mainContainer}>\r\n            <ThemeProvider theme={ theme }>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar variant=\"regular\" className={classes.appBar}>\r\n                    <Typography variant=\"h6\" >\r\n                        Digital Communications Laboratory Projects (LCD-UNC)\r\n                    </Typography>\r\n                </Toolbar>\r\n                <Tabs value={value} onChange={handleChange} variant=\"scrollable\"\r\n                        scrollButtons=\"on\">\r\n\r\n                    {/* Add new tabs here ----------------------------------------------- NEW PROJECTS TABS */}\r\n                    <Tab label=\"ContactAR\" {...a11yProps(0)} />\r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            \r\n            <Container maxWidth=\"xl\" className={classes.contentContainer}>\r\n                {/* ProjectTab with RepositoryCard example\r\n\r\n                    <ProjectTab value={value} index={0}>\r\n                        <Grid container spacing={3}>\r\n                            <RepoCard image=\"\" title=\"Example title 1\" description=\"This is a lazy description\"\r\n                                zipUrl=\"\"\r\n                                githubUrl=\"\" />\r\n\r\n                            <RepoCard image=\"\" title=\"Example title 2\" description=\"This is a lazy description\"\r\n                                zipUrl=\"\"\r\n                                githubUrl=\"\" />\r\n\r\n                        </Grid>\r\n                    </ProjectTab> */}\r\n\r\n                {/* Add new tab content here ----------------------------------------------- NEW PROJECTS TABS */}\r\n\r\n                <ProjectTab value={value} index={0}>\r\n                    <Grid container spacing={3}>\r\n                        <RepoCard image=\"\" title=\"Feature Selection Scripts and Data\" description='Contains the datasets and \r\n                                    scripts needed to obtain the results provided on the paper \"Feature Selection for Proximity \r\n                                    Estimation in COVID-19 Contact Tracing Apps based on Bluetooth Low Energy (BLE)\" presented in \r\n                                    \"Pervasive and Mobile Computing\" journal in the Special Issue on IoT for Fighting COVID-19'\r\n\r\n                            zipUrl=\"https://github.com/LCD-UNC/contactar_feature_selection/archive/master.zip\"\r\n                            githubUrl=\"https://github.com/LCD-UNC/contactar_feature_selection\" />\r\n\r\n                        <RepoCard image=\"\" title=\"Laboratory Android App\" description=\"Android application that can retrieve data \r\n                                    from different communication peripherals available on the device, persist them to a local database and \r\n                                    perform exporting operations in CSV file format to external storage memory. It is intended to use with \r\n                                    debugging and experimental purposes.\"\r\n\r\n                            zipUrl=\"https://github.com/LCD-UNC/contactar_laboratory_android_app/archive/master.zip\"\r\n                            githubUrl=\"https://github.com/LCD-UNC/contactar_laboratory_android_app\" />\r\n                    </Grid>\r\n                </ProjectTab>\r\n                \r\n            </Container>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}